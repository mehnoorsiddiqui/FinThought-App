/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Error1Error } from '../errors/error1Error';
import {
  AuditableReport,
  auditableReportSchema,
} from '../models/auditableReport';
import {
  CashFlowRecordPersonal,
  cashFlowRecordPersonalSchema,
} from '../models/cashFlowRecordPersonal';
import {
  PayStatementReportRecord,
  payStatementReportRecordSchema,
} from '../models/payStatementReportRecord';
import {
  PrequalificationReportResponse,
  prequalificationReportResponseSchema,
} from '../models/prequalificationReportResponse';
import {
  ReportSummaries,
  reportSummariesSchema,
} from '../models/reportSummaries';
import {
  StatementReportRecord,
  statementReportRecordSchema,
} from '../models/statementReportRecord';
import {
  TransactionsReportRecord,
  transactionsReportRecordSchema,
} from '../models/transactionsReportRecord';
import {
  VOAReportRecord,
  vOAReportRecordSchema,
} from '../models/vOAReportRecord';
import {
  VOAWithIncomeReportRecord,
  vOAWithIncomeReportRecordSchema,
} from '../models/vOAWithIncomeReportRecord';
import {
  VOEPayrollReportRecord,
  vOEPayrollReportRecordSchema,
} from '../models/vOEPayrollReportRecord';
import {
  VOETransactionsReportRecord,
  vOETransactionsReportRecordSchema,
} from '../models/vOETransactionsReportRecord';
import {
  VOIEPayrollReportRecord,
  vOIEPayrollReportRecordSchema,
} from '../models/vOIEPayrollReportRecord';
import {
  VOIEPaystubReportRecord,
  vOIEPaystubReportRecordSchema,
} from '../models/vOIEPaystubReportRecord';
import {
  VOIEPaystubWithTxverifyReportRecord,
  vOIEPaystubWithTxverifyReportRecordSchema,
} from '../models/vOIEPaystubWithTxverifyReportRecord';
import {
  VOIReportRecord,
  vOIReportRecordSchema,
} from '../models/vOIReportRecord';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class GetReportsByConsumerController extends BaseController {
  /**
   * Get a list of reports that have been generated for the given consumer.
   *
   * The status fields in the returned list will contain inProgress, failure, or success. If a status
   * shows inProgress, wait 20 seconds and then call again.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @return Response from the API call
   */
  async getReportsByConsumer(
    consumerId: string,
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportSummaries>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/decisioning/v1/consumers/${mapped.consumerId}/reports?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(reportSummariesSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report (UUID with max length 32 characters)
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuditableReport>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(auditableReportSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOAReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOAReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(vOAReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOIReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOIReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(vOIReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOAWithIncomeReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOAWithIncomeReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(vOAWithIncomeReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getPrequalificationReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PrequalificationReportResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(prequalificationReportResponseSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getPayStatementByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PayStatementReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(payStatementReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOIEPaystubWithTxverifyReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOIEPaystubWithTxverifyReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(
      vOIEPaystubWithTxverifyReportRecordSchema,
      requestOptions
    );
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       JSON or  XML
   * @param contentType  JSON or  XML
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getTransactionsReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionsReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(transactionsReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getStatementReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<StatementReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(statementReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOIEPayrollReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOIEPayrollReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(vOIEPayrollReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * @param accept       `application`/`json`
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getCashFlowReportPersonal(
    accept: string,
    consumerId: string,
    reportId: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CashFlowRecordPersonal>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(cashFlowRecordPersonalSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOIEPaystubReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOIEPaystubReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(vOIEPaystubReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOEPayrollReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOEPayrollReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(vOEPayrollReportRecordSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the Generate Report services.
   *
   * The report's status field will contain inProgress, failure, or success. If the status shows
   * inProgress, the client app should wait 20 seconds and then call again to see if the report is
   * finished.
   *
   * See Permissible Purpose Codes for a list of permissible purposes for retrieving a report.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param reportId     Finicity’s ID of the report
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param onBehalfOf   The name of the entity you are retrieving the report on behalf of.
   * @return Response from the API call
   */
  async getVOETransactionsReportByConsumer(
    consumerId: string,
    reportId: string,
    accept: string,
    contentType: string,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOETransactionsReportRecord>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}?purpose=31`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(vOETransactionsReportRecordSchema, requestOptions);
  }
}
