/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  expandoObject,
  lazy,
  number,
  optional,
  Schema,
  string,
} from '../schema';
import { DirectDeposit, directDepositSchema } from './directDeposit';
import { Employee, employeeSchema } from './employee';
import { Employer, employerSchema } from './employer';
import { PayStat, payStatSchema } from './payStat';
import {
  PaystubMonthlyIncomeRecord,
  paystubMonthlyIncomeRecordSchema,
} from './paystubMonthlyIncomeRecord';

export interface VOIEPaystubWithStatementPayStatement {
  /** The pay period of the pay statement. */
  payPeriod: string;
  /** This will display true if the pay statement is billable. If a pay statement has been digitized previously, this will display as false as it will not be billable. */
  billable: boolean;
  /** The asset ID of the stored pay statement */
  assetId: string;
  /** The listed pay date for the pay statement. */
  payDate: bigint;
  /** The beginning of the pay period. */
  startDate: bigint;
  /** The end of the pay period. */
  endDate: bigint;
  /** The total pay after deductions for the employee for the current pay period. */
  netPayCurrent: number;
  /** The total accumulation of pay after deductions for the employee for the current pay year. */
  netPayYTD: number;
  /** The total pay before deductions for the employee for the current pay period. */
  grossPayCurrent: number;
  /** The total accumulation of pay before deductions for the employee for the current pay year. */
  grossPayYTD: number;
  /** The payroll provider extracted from the pay statement. */
  payrollProvider?: string;
  /** Information pertaining to the employer */
  employer: Employer;
  /** Information pertaining to the employee */
  employee: Employee;
  /** Information pertaining to the earnings on the pay statement */
  payStat: PayStat[];
  /** Information pertaining to the direct deposits on the pay statement */
  directDeposits: DirectDeposit[];
  /** The Finicity estimated monthly income based on the pay cadence and the earnings categories from the paystub, as available. */
  monthlyIncome: PaystubMonthlyIncomeRecord;
  /** Not populated for the voieWithStatement style of paystub report. For the VOIE - Paystub (with TXVerfiy) reports this would include details of the financial institution accounts and income streams with matching transactions to the pay statement. */
  institutions: string[];
  /** Error code for the asset */
  errorCode?: number;
  /** Error message for the asset */
  errorMessage?: string;
  [key: string]: unknown;
}

export const vOIEPaystubWithStatementPayStatementSchema: Schema<VOIEPaystubWithStatementPayStatement> = expandoObject(
  {
    payPeriod: ['payPeriod', string()],
    billable: ['billable', boolean()],
    assetId: ['assetId', string()],
    payDate: ['payDate', bigint()],
    startDate: ['startDate', bigint()],
    endDate: ['endDate', bigint()],
    netPayCurrent: ['netPayCurrent', number()],
    netPayYTD: ['netPayYTD', number()],
    grossPayCurrent: ['grossPayCurrent', number()],
    grossPayYTD: ['grossPayYTD', number()],
    payrollProvider: ['payrollProvider', optional(string())],
    employer: ['employer', lazy(() => employerSchema)],
    employee: ['employee', lazy(() => employeeSchema)],
    payStat: ['payStat', array(lazy(() => payStatSchema))],
    directDeposits: ['directDeposits', array(lazy(() => directDepositSchema))],
    monthlyIncome: [
      'monthlyIncome',
      lazy(() => paystubMonthlyIncomeRecordSchema),
    ],
    institutions: ['institutions', array(string())],
    errorCode: ['errorCode', optional(number())],
    errorMessage: ['errorMessage', optional(string())],
  }
);
