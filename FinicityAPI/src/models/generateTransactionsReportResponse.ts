/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  expandoObject,
  lazy,
  optional,
  Schema,
  string,
} from '../schema';
import { ErrorMessage, errorMessageSchema } from './errorMessage';
import {
  TransactionReportConstraints,
  transactionReportConstraintsSchema,
} from './transactionReportConstraints';
import { TypeEnum, typeEnumSchema } from './typeEnum';

export interface GenerateTransactionsReportResponse {
  /** The reportId, to be passed to Get Report. (UUID with max length 12 characters) */
  id: string;
  /** A unique identifier that will be consistent across all reports created for the same customer. */
  portfolioId: string;
  /** active or testing */
  customerType: string;
  /** The customer ID. */
  customerId: bigint;
  /** Finicity’s request ID */
  requestID: string;
  /** Finicity’s name for the requester */
  requesterName: string;
  /** The date the report was generated. */
  createdDate: bigint;
  /** Finicity Transactions Report */
  title: string;
  /** Finicity report consumer ID, from Create Report Consumer. (UUID with max length 32 characters) */
  consumerId: string;
  /** The last four of the consumer’s social security */
  consumerSsn: string;
  /** Specifies use of accountIds, reportCustomFields, includePending, fromDate, and toDate when creating the report. */
  constraints: TransactionReportConstraints;
  /** Report type */
  type: TypeEnum;
  /** inProgress, success */
  status: string;
  errors?: ErrorMessage[];
  [key: string]: unknown;
}

export const generateTransactionsReportResponseSchema: Schema<GenerateTransactionsReportResponse> = expandoObject(
  {
    id: ['id', string()],
    portfolioId: ['portfolioId', string()],
    customerType: ['customerType', string()],
    customerId: ['customerId', bigint()],
    requestID: ['requestID', string()],
    requesterName: ['requesterName', string()],
    createdDate: ['createdDate', bigint()],
    title: ['title', string()],
    consumerId: ['consumerId', string()],
    consumerSsn: ['consumerSsn', string()],
    constraints: [
      'constraints',
      lazy(() => transactionReportConstraintsSchema),
    ],
    type: ['type', typeEnumSchema],
    status: ['status', string()],
    errors: ['errors', optional(array(lazy(() => errorMessageSchema)))],
  }
);
