/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Error1Error } from '../errors/error1Error';
import {
  PortfolioSummary,
  portfolioSummarySchema,
} from '../models/portfolioSummary';
import {
  PortfolioSummaryByCustomer,
  portfolioSummaryByCustomerSchema,
} from '../models/portfolioSummaryByCustomer';
import { bigint, string } from '../schema';
import { BaseController } from './baseController';

export class GetPortfoliosController extends BaseController {
  /**
   * Returns a portfolio of most recently generated report for each report type for a specified customer.
   * If there are multiple reports that were generated for a report type (VOA, VOI, etc), only the most
   * recently generated report for the type will be returned.
   *
   * HTTP 404 status means that there is no data for the customer or portfolio. HTTP 200 (OK) status
   * means that the call was successful.
   *
   *
   * @param customerId   Finicity ID of the customer
   * @param portfolioId  Finicity portfolio ID (Max 17 characters) with the portfolio version number. Using
   *                               the portfolio number without a version number will return the most recently
   *                               generated reports for the consumer.
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @return Response from the API call
   */
  async getPortfolioByCustomer(
    customerId: bigint,
    portfolioId: string,
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PortfolioSummaryByCustomer>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      portfolioId: [portfolioId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/decisioning/v1/customers/${mapped.customerId}/portfolios/${mapped.portfolioId}`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(portfolioSummaryByCustomerSchema, requestOptions);
  }

  /**
   * Returns a portfolio of most recently generated report for each report type for a specified consumer.
   * If there are multiple reports that were generated for a report type (VOA, VOI, etc), only the most
   * recently generated report for the type will be returned.
   *
   * HTTP 404 status means that there is no data for the consumer or portfolio. HTTP 200 (OK) status
   * means that the call was successful.
   *
   * @param consumerId   Finicity report consumer ID (max length 32 characters)
   * @param portfolioId  Finicity portfolio ID (Max 17 characters) with the portfolio version number. Using
   *                               the portfolio number without a version number will return the most recently
   *                               generated reports for the consumer.
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @return Response from the API call
   */
  async getPortfolioByConsumer(
    consumerId: string,
    portfolioId: string,
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PortfolioSummary>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      portfolioId: [portfolioId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/decisioning/v1/consumers/${mapped.consumerId}/portfolios/${mapped.portfolioId}`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(portfolioSummarySchema, requestOptions);
  }
}
