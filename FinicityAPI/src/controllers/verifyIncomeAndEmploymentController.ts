/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Error1Error } from '../errors/error1Error';
import {
  GeneratePayStatementReportResponse,
  generatePayStatementReportResponseSchema,
} from '../models/generatePayStatementReportResponse';
import {
  GenerateVOIEPaystubReportResponse,
  generateVOIEPaystubReportResponseSchema,
} from '../models/generateVOIEPaystubReportResponse';
import {
  GenerateVOIEPaystubWithTxverifyReportResponse,
  generateVOIEPaystubWithTxverifyReportResponseSchema,
} from '../models/generateVOIEPaystubWithTxverifyReportResponse';
import {
  PayrollReportConstraints,
  payrollReportConstraintsSchema,
} from '../models/payrollReportConstraints';
import {
  PayStatementConstraints,
  payStatementConstraintsSchema,
} from '../models/payStatementConstraints';
import {
  RefreshVOIEPayrollReportResponse,
  refreshVOIEPayrollReportResponseSchema,
} from '../models/refreshVOIEPayrollReportResponse';
import {
  VOIETxverifyConstraints,
  vOIETxverifyConstraintsSchema,
} from '../models/vOIETxverifyConstraints';
import {
  VOIEWithStatementConstraints,
  vOIEWithStatementConstraintsSchema,
} from '../models/vOIEWithStatementConstraints';
import { bigint, optional, string } from '../schema';
import { BaseController } from './baseController';

export class VerifyIncomeAndEmploymentController extends BaseController {
  /**
   * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of
   * the stored pay statements to generate a Pay Statement Extraction Report.
   *
   * This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report
   * under the current subscription plan. The billable event is the successful generation of a Pay
   * Statement Extraction Report.
   *
   * The service returns immediately with status HTTP 202 (Accepted) if successful. When finished, a
   * notification will be sent to the specified report callback URL, if specified.
   *
   * After making this call, the client app may wait for a notification to be sent to the Report Listener
   * Service, or it may enter a loop, which should wait 20 seconds and then call the service Get Report
   * to see if the report is finished. While the report is being generated, Get Report will return a
   * minimal report including status inProgress. The loop should repeat every 20 seconds until Get Report
   * returns a different status.
   *
   * The service will return HTTP 400 (Bad Request) if the asset ID does not exist within Finicity's
   * system.
   *
   * @param customerId   Finicity ID of the customer
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @param body
   * @param callbackUrl  The Report Listener URL to receive notifications (optional,
   *                                                       must be URL-encoded).
   * @return Response from the API call
   */
  async generatePayStatementReport(
    customerId: bigint,
    accept: string,
    contentType: string,
    body: PayStatementConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GeneratePayStatementReportResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      body: [body, payStatementConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/payStatement`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(
      generatePayStatementReportResponseSchema,
      requestOptions
    );
  }

  /**
   * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given
   * customer. This service retrieves up to two years of transaction history for the given accounts. It
   * then uses this information as well as the provided paystub(s), which are passed into the request
   * body as assetIds (generated using the Store Customer Pay Statment API) to generate the VOIE -
   * Paystub (with TXVerify) report.
   *
   * Note: If you are using this endpoint to refresh the bank transactions, use the same assetId from the
   * first report. A new paystub is not required unless the paystub is too old for underwriting
   * requirements. Using the same assetId that was on the original report and the previously extracted
   * details will be used to speed up report generation response time.
   *
   * This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current
   * subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.
   *
   * The service returns immediately with status HTTP 202 (Accepted). When finished, a notification will
   * be sent to the specified report callback URL, if specified.
   *
   * After making this call, the client app may wait for a notification to be sent to the Report Listener
   * Service, or it may enter a loop, which should wait 20 seconds and then call the service Get Report
   * to see if the report is finished. While the report is being generated, Get Report will return a
   * minimal report including status inProgress. The loop should repeat every 20 seconds until Get Report
   * returns a different status.
   *
   * When the call cannot be processed due to invalid input, the service will return HTTP 400 (Bad
   * Request).
   *
   * @param customerId   Finicity ID for the customer
   * @param accept       application/json or application/xml
   * @param contentType  application/json or application/xml
   * @param body
   * @param callbackUrl  The Report Listener URL to receive notifications (optional,
   *                                                       must be URL-encoded).
   * @return Response from the API call
   */
  async generateVOIEPaystubWithTxverifyReport(
    customerId: bigint,
    accept: string,
    contentType: string,
    body: VOIETxverifyConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GenerateVOIEPaystubWithTxverifyReportResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      body: [body, vOIETxverifyConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voieTxVerify/withInterview`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(
      generateVOIEPaystubWithTxverifyReportResponseSchema,
      requestOptions
    );
  }

  /**
   * The VOIE – Payroll report generates when the customer completes Connect. Lenders, who commonly use
   * this report for pre-close verification employment check, can refresh this report by passing the
   * consumer’s SSN, DOB, and the `reportId` from the first VOIE – Payroll report they received.
   *
   * We’ll refresh this report and update any new pay histories since the first report generated,
   * including borrower’s employment status as active or not.
   *
   * Note: Lenders can only refresh this report one time in a 60-day period starting from the date of the
   * first report. Any further report refreshes will incur additional charges.
   *
   * The service immediately returns the status HTTP 202 (accepted). A notification gets sent to the
   * report callback URL, if specified.
   *
   * After the call is made, the client’s application can wait for a notification sent by the Report
   * Listener Service. Or it may enter a loop, which waits about 20 seconds and then calls the service,
   * Get Report to check if the report is finished.
   *
   * While the report’s generating, Get Report returns a minimal report with a status of InProgress.  The
   * loop repeats every 20 seconds until Get Report returns a different status.
   *
   * @param customerId   Finicity ID for the customer
   * @param accept       application/json
   * @param contentType  application/json
   * @param body
   * @param callbackUrl  The Report Listener URL to receive notifications (optional,
   *                                                        must be URL-encoded).
   * @return Response from the API call
   */
  async refreshVOIEPayrollReport(
    customerId: bigint,
    accept: string,
    contentType: string,
    body: PayrollReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RefreshVOIEPayrollReportResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accept: [accept, string()],
      contentType: [contentType, string()],
      body: [body, payrollReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voiePayroll`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(
      refreshVOIEPayrollReportResponseSchema,
      requestOptions
    );
  }

  /**
   * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into
   * the request body as assetIds (generated using the Store Customer Pay Statment API) to generate the
   * VOIE - Paystub (with TXVerify) report with digitized paystub details.
   *
   * This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the
   * current subscription plan. The billable event is the successful generation of a VOIE - Paystub
   * Report.
   *
   * The service returns immediately with status HTTP 202 (Accepted). When finished, a notification will
   * be sent to the specified report callback URL, if specified.
   *
   * After making this call, the client app may wait for a notification to be sent to the Report Listener
   * Service, or it may enter a loop, which should wait 20 seconds and then call the service Get Report
   * to see if the report is finished. While the report is being generated, Get Report will return a
   * minimal report including status inProgress. The loop should repeat every 20 seconds until Get Report
   * returns a different status.
   *
   * When the call cannot be processed due to invalid input, the service will return HTTP 400 (Bad
   * Request).
   *
   * @param customerId  Finicity ID for the customer
   * @param accept      application/json
   * @param body
   * @param callbackUrl The Report Listener URL to receive notifications
   *                                                           (optional, must be URL-encoded).
   * @return Response from the API call
   */
  async generateVOIEPaystubReport(
    customerId: bigint,
    accept: string,
    body: VOIEWithStatementConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GenerateVOIEPaystubReportResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accept: [accept, string()],
      body: [body, vOIEWithStatementConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voieTxVerify/withStatement`;
    req.throwOn(400, Error1Error, 'Bad Request');
    return req.callAsJson(
      generateVOIEPaystubReportResponseSchema,
      requestOptions
    );
  }
}
