/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Error1Error } from '../errors/error1Error';
import { Consumer, consumerSchema } from '../models/consumer';
import {
  CreateConsumerRequest,
  createConsumerRequestSchema,
} from '../models/createConsumerRequest';
import {
  CreateConsumerResponse,
  createConsumerResponseSchema,
} from '../models/createConsumerResponse';
import {
  ModifyConsumerRequest,
  modifyConsumerRequestSchema,
} from '../models/modifyConsumerRequest';
import { bigint, string } from '../schema';
import { BaseController } from './baseController';

export class ConsumerController extends BaseController {
  /**
   * Modify the details for an existing consumer. All fields are required for a consumer record, but
   * individual fields for this call are optional because fields that are not specified will be left
   * unchanged.
   *
   * If the service is successful, HTTP 204 (No Content) will be returned. If the consumer does not exist,
   * the service will return HTTP 404.
   *
   * @param consumerId   Finicity ID of the consumer (UUID with max length 32
   *                                                     characters)
   * @param body         Consumer details
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @return Response from the API call
   */
  async modifyConsumer(
    consumerId: string,
    body: ModifyConsumerRequest,
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      body: [body, modifyConsumerRequestSchema],
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v1/consumers/${mapped.consumerId}`;
    req.throwOn(404, Error1Error, 'Bad Request');
    return req.call(requestOptions);
  }

  /**
   * Get the details of a consumer record.
   *
   * If the service is successful, HTTP 200 (Accepted) will be returned. If the customer does not exist,
   * the service will return HTTP 404 (Not Found)
   *
   * @param customerId   Finicity’s ID of the customer
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @return Response from the API call
   */
  async getConsumerForCustomer(
    customerId: bigint,
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Consumer>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/decisioning/v1/customers/${mapped.customerId}/consumer`;
    req.throwOn(404, Error1Error, 'Bad Request');
    return req.callAsJson(consumerSchema, requestOptions);
  }

  /**
   * Get the details of a consumer record. If the service successfully retrieves the consumer record,
   * HTTP 200 will be returned. If the consumer does not exist, the service will return HTTP 404.
   *
   * @param consumerId   Finicity’s ID of the consumer (UUID with max length 32 characters)
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @return Response from the API call
   */
  async getConsumer(
    consumerId: string,
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Consumer>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/decisioning/v1/consumers/${mapped.consumerId}`;
    req.throwOn(404, Error1Error, 'Bad Request');
    return req.callAsJson(consumerSchema, requestOptions);
  }

  /**
   * Create a consumer record associated with the given customer. A consumer persists as the owner of any
   * reports that are generated, even after the original customer is deleted from the system. A consumer
   * must be created for the given customer before calling any of the Generate Report services.
   *
   * If a consumer already exists for this customer, this service will return HTTP 409 (Conflict). If the
   * consumer is successfully created, the service will return HTTP 201 (Created).
   *
   * @param customerId   Finicity’s ID for the customer
   * @param body
   * @param accept       Replace 'json' with 'xml' if preferred
   * @param contentType  Replace 'json' with 'xml' if preferred
   * @return Response from the API call
   */
  async createConsumer(
    customerId: bigint,
    body: CreateConsumerRequest,
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateConsumerResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      body: [body, createConsumerRequestSchema],
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v1/customers/${mapped.customerId}/consumer`;
    req.throwOn(404, Error1Error, 'Bad Request');
    return req.callAsJson(createConsumerResponseSchema, requestOptions);
  }
}
