/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GenerateCashFlowReportBusinessResponse,
  generateCashFlowReportBusinessResponseSchema,
} from '../models/generateCashFlowReportBusinessResponse';
import {
  GenerateCashFlowReportPersonalResponse,
  generateCashFlowReportPersonalResponseSchema,
} from '../models/generateCashFlowReportPersonalResponse';
import {
  RequestConstraints,
  requestConstraintsSchema,
} from '../models/requestConstraints';
import { bigint, optional, string } from '../schema';
import { BaseController } from './baseController';

export class CashFlowController extends BaseController {
  /**
   * Generate a Cash Flow Report (Business) report for all checking and savings under the given Customer.
   * This service retrieves up to two years of transaction history for the given account. It then uses
   * this information to generate the CFR report. A consumer is not required to generate this report.
   *
   * This report is not provided under FCRA rules, and this report is not available in the Finicity
   * Consumer Portal for the borrower to view.
   *
   * The service returns immediately with status HTTP 202 (Accepted). When finished, a notification will
   * be sent to the specified report callback URL, if specified.
   *
   * After making this call, the client app may wait for a notification to be sent to the Report Listener
   * Service, or it may enter a loop, which should wait 20 seconds and then call the service Get Report
   * to see if the report is finished. While the report is being generated, Get Report will return a
   * minimal report including status inProgress. The loop should repeat every 20 seconds until Get Report
   * returns a different status.
   *
   * If no account of type of checking or savings is found, the service will return HTTP 400 (Bad
   * Request).
   *
   * @param customerId  ID of the customer
   * @param accept      JSON or XML output.
   * @param callbackUrl The Report Listener URL to receive notifications (optional, must
   *                                                 be URL-encoded)
   * @param body
   * @return Response from the API call
   */
  async generateCashFlowReportBusiness(
    customerId: bigint,
    accept: string,
    callbackUrl?: string,
    body?: RequestConstraints,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GenerateCashFlowReportBusinessResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accept: [accept, string()],
      callbackUrl: [callbackUrl, optional(string())],
      body: [body, optional(requestConstraintsSchema)],
    });
    req.header('Accept', mapped.accept);
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/cashFlowBusiness`;
    return req.callAsJson(
      generateCashFlowReportBusinessResponseSchema,
      requestOptions
    );
  }

  /**
   * Generate a Cash Flow Report (Personal) report for all checking and savings under the given Customer.
   * This service retrieves up to two years of transaction history for the given account. It then uses
   * this information to generate the CFR report.
   *
   * This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting
   * Agency).  If an individual account is included in the report - for example, with an individual
   * acting as an personal guarantor on the loan - then this version of the report should be used. In
   * case of an adverse action on the loan where the decision was based on this report, then the borrower
   * can be referred to the Finicity Consumer Portal (https://consumer.finicityreports.com) where they
   * can view this report and submit a dispute if they feel any information in this report is inaccurate.
   *
   * The service returns immediately with status HTTP 202 (Accepted). When finished, a notification will
   * be sent to the specified report callback URL, if specified.
   *
   * After making this call, the client app may wait for a notification to be sent to the Report Listener
   * Service, or it may enter a loop, which should wait 20 seconds and then call the service Get Report
   * to see if the report is finished. While the report is being generated, Get Report will return a
   * minimal report including status inProgress. The loop should repeat every 20 seconds until Get Report
   * returns a different status.
   *
   * A Report Consumer must be created for the given Customer before calling this service. If no Report
   * Consumer has been created, the service will return HTTP 400 (Bad Request).
   *
   * If no account of type of checking or savings is found, the service will return HTTP 400 (Bad
   * Request).
   *
   * @param customerId  ID of the customer
   * @param accept      JSON or XML output.
   * @param callbackUrl The Report Listener URL to receive notifications (optional, must
   *                                                 be URL-encoded)
   * @param body
   * @return Response from the API call
   */
  async generateCashFlowReportPersonal(
    customerId: bigint,
    accept: string,
    callbackUrl?: string,
    body?: RequestConstraints,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GenerateCashFlowReportPersonalResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accept: [accept, string()],
      callbackUrl: [callbackUrl, optional(string())],
      body: [body, optional(requestConstraintsSchema)],
    });
    req.header('Accept', mapped.accept);
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/cashFlowPersonal`;
    return req.callAsJson(
      generateCashFlowReportPersonalResponseSchema,
      requestOptions
    );
  }
}
