/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateTxpushTestTransactionRequest,
  createTxpushTestTransactionRequestSchema,
} from '../models/createTxpushTestTransactionRequest';
import {
  CreateTxpushTestTransactionResponse,
  createTxpushTestTransactionResponseSchema,
} from '../models/createTxpushTestTransactionResponse';
import {
  TxpushSubscriptionRequest,
  txpushSubscriptionRequestSchema,
} from '../models/txpushSubscriptionRequest';
import {
  TxpushSubscriptions,
  txpushSubscriptionsSchema,
} from '../models/txpushSubscriptions';
import { bigint, string } from '../schema';
import { BaseController } from './baseController';

export class TxpushController extends BaseController {
  /**
   * Register a client app’s TxPUSH Listener to receive TxPUSH notifications related to the given account.
   *
   * Each call to this service will return two records, one with class account and one with class
   * transaction. Account events are sent when values change in the account’s fields (such as balance or
   * interestRate). Transaction events are sent whenever a new transaction is posted for the account. For
   * institutions that do not provide TxPUSH services, notifications are sent as soon as Finicity finds a
   * new transaction or new account data through regular aggregation processes.
   *
   * The listener’s URL must be secure (https) for any real-world account. In addition, the
   * client’sTxPUSH Listener will need to be verified. HTTP and HTTPS connections are only allowed on the
   * standard ports 80 (HTTP) and 443 (HTTPS). The use of other ports will result with the call failing.
   * For additional details on this process please see, TxPUSH Listener Service.
   *
   * @param contentType  application/json, application/xml
   * @param accept       application/json, application/xml
   * @param customerId   The Finicity ID of the customer who owns the account
   * @param accountId    The Finicity ID of the account whose events will be sent
   *                                                         to the TxPUSH Listener
   * @param body
   * @return Response from the API call
   */
  async subscribeToTxpushNotifications(
    contentType: string,
    accept: string,
    customerId: bigint,
    accountId: bigint,
    body: TxpushSubscriptionRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TxpushSubscriptions>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      accept: [accept, string()],
      customerId: [customerId, bigint()],
      accountId: [accountId, bigint()],
      body: [body, txpushSubscriptionRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('Accept', mapped.accept);
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/txpush`;
    return req.callAsJson(txpushSubscriptionsSchema, requestOptions);
  }

  /**
   * Inject a transaction into the transaction list for a testing account. This allows an app to trigger
   * TxPush notifications for the account in order to test the app’s TxPush Listener service. This causes
   * the platform to send one transaction event and one account event (showing that the account balance
   * has changed). This service is only supported for testing accounts (accounts on institution 101732).
   *
   * @param contentType  application/json, application/xml
   * @param accept       application/json, application/xml
   * @param customerId   The ID of the customer who owns the account
   * @param accountId    The Finicity ID of the account whose events will
   *                                                                  be sent to the TxPUSH Listener
   * @param body
   * @return Response from the API call
   */
  async createTxpushTestTransaction(
    contentType: string,
    accept: string,
    customerId: bigint,
    accountId: bigint,
    body: CreateTxpushTestTransactionRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateTxpushTestTransactionResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      accept: [accept, string()],
      customerId: [customerId, bigint()],
      accountId: [accountId, bigint()],
      body: [body, createTxpushTestTransactionRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('Accept', mapped.accept);
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/transactions`;
    return req.callAsJson(
      createTxpushTestTransactionResponseSchema,
      requestOptions
    );
  }

  /**
   * Delete all TxPush subscriptions with their notifications for the indicated account. No more
   * notifications will be sent for account or transaction events.
   *
   * @param customerId The ID of the customer who owns the account
   * @param accountId  The Finicity ID of the account whose events will be sent to the TxPUSH Listener
   * @return Response from the API call
   */
  async disableTxpushNotifications(
    customerId: bigint,
    accountId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      accountId: [accountId, bigint()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/txpush`;
    return req.call(requestOptions);
  }

  /**
   * Delete a specific subscription to TxPush notifications for the indicated account. This could be
   * individual deleting the account or transactions events. No more events will be sent for that
   * specific subscription.
   *
   * @param customerId     The ID of the customer who owns the account
   * @param subscriptionId The ID of the specific subscription to be deleted, returned from Enable TxPUSH
   *                                 Notifications
   * @return Response from the API call
   */
  async deleteTxpushSubscription(
    customerId: bigint,
    subscriptionId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      subscriptionId: [subscriptionId, bigint()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/subscriptions/${mapped.subscriptionId}`;
    return req.call(requestOptions);
  }
}
