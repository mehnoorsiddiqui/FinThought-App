/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { AccountOwnerV1, accountOwnerV1Schema } from '../models/accountOwnerV1';
import { bigint, string } from '../schema';
import { BaseController } from './baseController';

export class AccountOwnerController extends BaseController {
  /**
   * Retrieve the names and addresses of the account owner from a financial institution.
   *
   * **Note**: This is a premium service, billable per every successful API call.
   *
   * HTTP status of 200 means the account owner’s name and address were retrieved successfully.
   *
   * HTTP status of 203 means the response contains an MFA challenge in XML or JSON format. Contact your
   * Account Manager or Systems Engineers to determine the best route to handle this HTTP status code.
   *
   * This service retrieves account data from the institution. This usually returns quickly, but in some
   * scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.
   *
   * @param accept     application/json, application/xml
   * @param customerId Finicity’s ID for the customer
   * @param accountId  Finicity’s ID of the account
   * @return Response from the API call
   */
  async getAccountOwner(
    accept: string,
    customerId: bigint,
    accountId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountOwnerV1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      customerId: [customerId, bigint()],
      accountId: [accountId, bigint()],
    });
    req.header('Accept', mapped.accept);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/owner`;
    return req.callAsJson(accountOwnerV1Schema, requestOptions);
  }
}
