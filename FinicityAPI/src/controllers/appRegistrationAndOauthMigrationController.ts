/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AppRegistrationRequest,
  appRegistrationRequestSchema,
} from '../models/appRegistrationRequest';
import {
  AppRegistrationResponse,
  appRegistrationResponseSchema,
} from '../models/appRegistrationResponse';
import { AppStatuses, appStatusesSchema } from '../models/appStatuses';
import {
  CustomerAccounts,
  customerAccountsSchema,
} from '../models/customerAccounts';
import {
  ModifyAppRegistrationRequest,
  modifyAppRegistrationRequestSchema,
} from '../models/modifyAppRegistrationRequest';
import { bigint, optional, string } from '../schema';
import { BaseController } from './baseController';

export class AppRegistrationAndOauthMigrationController extends BaseController {
  /**
   * If you have multiple applications for a single client, and you want to register their applications
   * to access financial institutions using OAuth connections, then use this API to assign all
   * applications to an existing customer.
   *
   * @param customerId    The customer's ID for the customer you want to assign the app for.
   * @param applicationId Application ID you want to assign the customer to. This is the "applicationId"
   *                                value returned from the Get App Registration Status endpoint
   * @return Response from the API call
   */
  async setCustomerApplicationID(
    customerId: bigint,
    applicationId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      applicationId: [applicationId, bigint()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/applications/${mapped.applicationId}`;
    return req.call(requestOptions);
  }

  /**
   * Register new applications to access financial institutions using OAuth connections.
   *
   * @param body The values for the new app registration
   * @return Response from the API call
   */
  async appRegistration(
    body: AppRegistrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AppRegistrationResponse>> {
    const req = this.createRequest(
      'POST',
      '/aggregation/v1/partners/applications'
    );
    const mapped = req.prepareArgs({
      body: [body, appRegistrationRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(appRegistrationResponseSchema, requestOptions);
  }

  /**
   * Update the field values you want to change for the registered applications accessing financial
   * institutions using OAuth connections.
   *
   * @param preAppId The preAppId from the App Registration and Get App
   *                                                        Registration Status endpoints
   * @param body     The values for the app registration modification
   * @return Response from the API call
   */
  async modifyAppRegistration(
    preAppId: bigint,
    body: ModifyAppRegistrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AppRegistrationResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      preAppId: [preAppId, bigint()],
      body: [body, modifyAppRegistrationRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/partners/applications/${mapped.preAppId}`;
    return req.callAsJson(appRegistrationResponseSchema, requestOptions);
  }

  /**
   * The institutionLoginId parameter uses Finicityâ€™s internal FI mapping to move accounts from the
   * current FI legacy connection to the new OAuth FI connection.
   *
   * The API returns a list of accounts for the institution login id specified with an HTTP status code
   * 200.
   *
   * @param customerId         The target customer for the account migration
   * @param institutionLoginId The institutionLoginId for the set of accounts to be migrated from the legacy
   *                                     FI ID to the new OAuth FI ID
   * @return Response from the API call
   */
  async migrateInstitutionLoginAccountsV2(
    customerId: bigint,
    institutionLoginId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccounts>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      customerId: [customerId, bigint()],
      institutionLoginId: [institutionLoginId, bigint()],
    });
    req.appendTemplatePath`/aggregation/v2/customers/${mapped.customerId}/institutionLogins/${mapped.institutionLoginId}/migration`;
    return req.callAsJson(customerAccountsSchema, requestOptions);
  }

  /**
   * Get the status of your application registration to access financial institutions using OAuth
   * connections.
   *
   * @param accept        application/json, application/xml
   * @param preAppId      Look up the status of an app by the preAppId
   * @param applicationId Look up the status of an app by the applicationId
   * @param status        Look up the status of app registration requests by the registration request status.
   *                                Valid values P (For Pending), A (For Approved), R (For Rejected)
   * @param appName       Look up app registration requests by the application name
   * @param submittedDate Look up app registration requests by the date they were submitted in epoch format.
   * @param modifiedDate  Look up app registration requests by the date the request was updated. This could
   *                                be used to determine when the app was updated to approved or rejected.
   * @param page          Select which page of results to return
   * @param pageSize      Select how many results per page to return
   * @return Response from the API call
   */
  async getAppRegistrationStatusV2(
    accept?: string,
    preAppId?: bigint,
    applicationId?: string,
    status?: string,
    appName?: string,
    submittedDate?: bigint,
    modifiedDate?: bigint,
    page?: bigint,
    pageSize?: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AppStatuses>> {
    const req = this.createRequest(
      'GET',
      '/aggregation/v2/partners/applications'
    );
    const mapped = req.prepareArgs({
      accept: [accept, optional(string())],
      preAppId: [preAppId, optional(bigint())],
      applicationId: [applicationId, optional(string())],
      status: [status, optional(string())],
      appName: [appName, optional(string())],
      submittedDate: [submittedDate, optional(bigint())],
      modifiedDate: [modifiedDate, optional(bigint())],
      page: [page, optional(bigint())],
      pageSize: [pageSize, optional(bigint())],
    });
    req.header('Accept', mapped.accept);
    req.query('preAppId', mapped.preAppId);
    req.query('applicationId', mapped.applicationId);
    req.query('status', mapped.status);
    req.query('appName', mapped.appName);
    req.query('submittedDate', mapped.submittedDate);
    req.query('modifiedDate', mapped.modifiedDate);
    req.query('page', mapped.page);
    req.query('pageSize', mapped.pageSize);
    return req.callAsJson(appStatusesSchema, requestOptions);
  }
}
