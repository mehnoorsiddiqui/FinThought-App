/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  GenerateStatementReportConstraints,
  generateStatementReportConstraintsSchema,
} from '../models/generateStatementReportConstraints';
import {
  GenerateStatementReportResponse,
  generateStatementReportResponseSchema,
} from '../models/generateStatementReportResponse';
import { bigint, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class BankStatementsController extends BaseController {
  /**
   * Retrieve the customer's bank statements in PDF format. Up to 24 months of history is available
   * depending on the financial institution. Since this is a premium service, charges incur per each
   * successful statement retrieved.
   *
   * Our list of [Supported Institutions](https://docs.finicity.com/institutions/) confirms that you can
   * retrieve statements for the following account types:
   * * Checking
   * * Savings
   * * Money market
   * * CDs
   * * Investments
   * * Mortgage
   * * Credit cards
   * * Loans
   * * Line of credit
   *
   * ** Set request timeout **:  We recommend setting the timeout to 180 seconds to allow plenty of time
   * for a response.
   *
   * ** Error codes **
   * * **HTTP 200**: Success. The response is a binary string that you can save as a PDF file.
   *
   * * ** HTTP 203 **: The response contains an MFA challenge question in JSON format.
   * Contact one of our system engineers for help in resolving this error.
   *
   * @param accept     application/pdf, application/json (the document will be in PDF format, but errors
   *                             will be JSON)
   * @param customerId Finicity ‘s ID for the customer who owns the account
   * @param accountId  Finicity’s ID of the account
   * @param index      Request statements from 1- 24. By default, 1 is the most recent statement. Increase
   *                             the index value to count back (by month) and retrieve its most recent statement.
   * @return Response from the API call
   */
  async getCustomerAccountStatement(
    accept: string,
    customerId: bigint,
    accountId: bigint,
    index?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      customerId: [customerId, bigint()],
      accountId: [accountId, bigint()],
      index: [index, optional(number())],
    });
    req.header('Accept', mapped.accept);
    req.query('index', mapped.index);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/statement`;
    return req.callAsStream(requestOptions);
  }

  /**
   * Generate a Statement Report report for specified accounts under the given customer. This report
   * requires a consumer.
   *
   * The service returns immediately with status HTTP 202 (Accepted). When finished, a notification will
   * be sent to the specified report callback URL, if specified.
   *
   * This is a premium service. A billable event will be created upon the successful generation of the
   * Statement Report.
   *
   * After making this call, the client app may wait for a notification to be sent to the Report Listener
   * Service, or it may enter a loop, which should wait 20 seconds and then call the service Get Report
   * to see if the report is finished. While the report is being generated, Get Report will return a
   * minimal report including status inProgress. The loop should repeat every 20 seconds until Get Report
   * returns a different status.
   *
   * A Report Consumer must be created for the given Customer (using Create Report Consumer) before
   * calling this service. If no Report Consumer has been created, the service will return HTTP 400 (Bad
   * Request).
   *
   * @param accept      Replace 'json' with 'xml' if preferred
   * @param customerId  ID of the customer
   * @param body
   * @param callbackUrl The Report Listener URL to receive notifications
   *                                                                 (optional, must be URL-encoded)
   * @return Response from the API call
   */
  async generateStatementReport(
    accept: string,
    customerId: bigint,
    body: GenerateStatementReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GenerateStatementReportResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      customerId: [customerId, bigint()],
      body: [body, generateStatementReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/statement`;
    return req.callAsJson(
      generateStatementReportResponseSchema,
      requestOptions
    );
  }
}
