/**
 * Finicity APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ACHDetails, aCHDetailsSchema } from '../models/aCHDetails';
import {
  GetAvailableBalanceLiveResponse,
  getAvailableBalanceLiveResponseSchema,
} from '../models/getAvailableBalanceLiveResponse';
import {
  GetAvailableBalanceResponse,
  getAvailableBalanceResponseSchema,
} from '../models/getAvailableBalanceResponse';
import { bigint, string } from '../schema';
import { BaseController } from './baseController';

export class PaymentsController extends BaseController {
  /**
   * This will return the real account number and routing number details for an ACH payment.
   *
   * Note: This is a premium service, billable per every successful API call.
   *
   * @param accept     application/json, application/xml
   * @param customerId Finicity’s ID for the customer who owns the account
   * @param accountId  Finicity’s ID of the account
   * @return Response from the API call
   */
  async getAccountACHDetails(
    accept: string,
    customerId: string,
    accountId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ACHDetails>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      customerId: [customerId, string()],
      accountId: [accountId, string()],
    });
    req.header('Accept', mapped.accept);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/details`;
    return req.callAsJson(aCHDetailsSchema, requestOptions);
  }

  /**
   * Retrieve the available and cleared account balances for a single account in real-time directly from
   * a financial institution.
   *
   * Timestamps are in Unix Epoch time.
   *
   * **Note**: This is a premium service, billable per every successful API call.
   *
   * @param accept     application/json, application/xml
   * @param customerId ID for the customer who owns the account
   * @param accountId  ID for the customer’s account
   * @return Response from the API call
   */
  async getAvailableBalanceLive(
    accept: string,
    customerId: bigint,
    accountId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GetAvailableBalanceLiveResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      customerId: [customerId, bigint()],
      accountId: [accountId, bigint()],
    });
    req.header('Accept', mapped.accept);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/availableBalance/live`;
    return req.callAsJson(
      getAvailableBalanceLiveResponseSchema,
      requestOptions
    );
  }

  /**
   * Retrieve the latest cached available and cleared account balances for a customer. Since we update
   * and store balances throughout the day, this is the most accurate balance information available when
   * a connection to a financial institution is unavailable or when a faster response is needed.
   *
   * Timestamps are in Unix Epoch time.
   *
   * **Note**: This is a premium service, billable per every successful API call. Enrollment is required.
   *
   * @param accept     application/json, application/xml
   * @param customerId ID for the customer who owns the account
   * @param accountId  ID for the customer’s account
   * @return Response from the API call
   */
  async getAvailableBalance(
    accept: string,
    customerId: bigint,
    accountId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GetAvailableBalanceResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      customerId: [customerId, bigint()],
      accountId: [accountId, bigint()],
    });
    req.header('Accept', mapped.accept);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/availableBalance`;
    return req.callAsJson(getAvailableBalanceResponseSchema, requestOptions);
  }
}
